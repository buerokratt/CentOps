openapi: 3.0.0
info:
  version: 0.1.0
  title: Central Operations Mock API
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  description: Describes mock endpoints in the CentOps API 
tags:
  - name: mock
    description: Endpoints that are using mocked responses
paths:
  /mocks/mock-email-service:
    post:
      tags:
        - mock
      summary: Mocks sending an e-mail
      operationId: mock-email-service
      description: Takes input for sending an e-mail and returns a mocked response, if all required inputs are present
      responses:
        '200':
          description: email sent
        '400':
          description: Any of the required parameters are missing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
        description: Parameters to necessary for sending an email
  /mocks/mock-tim-admin-response:
    post:
      tags:
        - mock
      summary: Mocks admin response from TIM
      operationId: mock-tim-admin-response
      description: Repsponds with a decoded JWT as TIM would
      responses:
         '200':
          description: A decoded JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecodedAdminJwt'
  /mocks/mock-tim-applicant-response:
    post:
      tags:
        - mock
      summary: Mocks applicant response from TIM
      operationId: mock-tim-applicant-response
      description: Repsponds with a decoded JWT as TIM would
      responses:
         '200':
          description: A decoded JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecodedApplicantJwt'
  /mocks/mock-tim-token-response:
    post:
      tags:
        - mock
      summary: Mocks a jwt response from TIM
      operationId: mock-tim-token-response
      description: Repsponds with a JWT as TIM would
      responses:
         '200':
          description: A JWT response mock from TIM
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
components:
  schemas:
    Email:
      type: object
      required:
        - to
        - subject
        - text
      properties:
        to:
          type: string
          format: email
          example: admin@admin.ee
        subject:
          type: string
          example: This is a subject
        text:
          type: string
          example: Lorem ipsum 
    DecodedAdminJwt:
      type: object
      properties:
        sub:
          type: string
          example: ""
        firstName:
          type: string
          example: "MARY ÄNN"
        idCode: 
          type: string
          example: "EE60001019906"
        displayName:
          type: string
          example: "MARY ÄNN"
        iss:
          type: string
          example: "test.buerokratt.ee"
        exp:
          type: number
          example: 1670250948
        login:
          type: string
          example: "EE60001019906"
        iat:
          type: number
          example: 1670243748
        jti:
          type: string
          format: UUID
          example:  "e14a5084-3b30-4a55-8720-c2ee22f43c2c"
        authorities:
          type: array
          items: 
            type: string
          example: [ "ROLE_ADMINISTRATOR" ]
    DecodedApplicantJwt:
      type: object
      properties:
        sub:
          type: string
          example: ""
        firstName:
          type: string
          example: "MARY ÄNN"
        idCode: 
          type: string
          example: "EE60001019906"
        displayName:
          type: string
          example: "MARY ÄNN"
        iss:
          type: string
          example: "test.buerokratt.ee"
        exp:
          type: number
          example: 1670250948
        login:
          type: string
          example: "EE60001019906"
        iat:
          type: number
          example: 1670243748
        jti:
          type: string
          format: UUID
          example:  "e14a5084-3b30-4a55-8720-c2ee22f43c2c"
        authorities:
          type: array
          items: 
            type: string
          example: [ "ROLE_APPLICANT" ]
    TokenResponse:
      type: object
      properties:
        jwt:
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIiLCJmaXJzdE5hbWUiOiJNQVJZIMOETk4iLCJpZENvZGUiOiJFRTYwMDAxMDE5OTA2IiwiZGlzcGxheU5hbWUiOiJNQVJZIMOETk4iLCJpc3MiOiJ0ZXN0LmJ1ZXJva3JhdHQuZWUiLCJleHAiOiIxNjcwMjUwOTQ4IiwibG9naW4iOiJFRTYwMDAxMDE5OTA2IiwiaWF0IjoiMTY3MDI0Mzc0OCIsImp0aSI6ImUxNGE1MDg0LTNiMzAtNGE1NS04NzIwLWMyZWUyMmY0M2MyYyIsImF1dGhvcml0aWVzIjpbIlJPTEVfQVBQTElDQU5UIl19.7mPCt7EJvlJEIyaZmCTMMhpsUEM8VfagKn6Wj8_75vw"
        